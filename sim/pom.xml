<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>br.com.aexo</groupId>
	<artifactId>sim</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Timestamp format for the maven.build.timestamp property -->
		<!-- You can reference property in pom.xml or filtered resources (must 
			enable third-party plugin if using Maven < 2.1) -->
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
		<!-- Specify the JBoss AS directory to be the JBOSS_HOME environment variable -->
		<jboss.home>${env.JBOSS_HOME}</jboss.home>
		<org.richfaces.bom.version>4.1.0.20111101-M4</org.richfaces.bom.version>
		<primefaces.version>3.0.M3</primefaces.version>
	</properties>

	<repositories>
		<!-- The JBoss Community public repository is a composite repository of 
			several major repositories -->
		<!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
		<repository>
			<id>jboss-public-repository</id>
			<name>JBoss Repository</name>
			<url>http://repository.jboss.org/nexus/content/groups/public</url>
			<!-- These optional flags are designed to speed up your builds by reducing 
				remote server calls -->
			<releases>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<repository>
			<id>modularity-releases</id>
			<name>Modularity Releases Repository</name>
			<url>http://m2.modularity.net.au/releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<repository>
			<id>prime-repo</id>
			<name>Prime Technology Maven Repository</name>
			<url>http://repository.primefaces.org</url>
			<layout>default</layout>
		</repository>

	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>jboss-public-repository</id>
			<name>JBoss Repository</name>
			<url>http://repository.jboss.org/nexus/content/groups/public</url>
			<releases>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.richfaces</groupId>
				<artifactId>richfaces-bom</artifactId>
				<version>${org.richfaces.bom.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>org.jboss.seam</groupId>
				<artifactId>seam-bom</artifactId>
				<version>3.1.0.Beta5</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
			typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>1.1.1.Final</version>
			<scope>provided</scope>
			<!-- Excluded because it's provided by the Java EE 6 dependencies -->
			<exclusions>
				<exclusion>
					<groupId>org.hibernate.javax.persistence</groupId>
					<artifactId>hibernate-jpa-2.0-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>


		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<version>1.0.0.CR1</version>
			<scope>test</scope>
		</dependency>

		<!-- Include the JBoss' Java EE 6 APIs -->
		<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
			of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
			of artifacts. We use this here so that we always get the correct versions 
			of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can read this 
			as the JBoss stack of the Java EE 6 Web Profile APIs), and we use version 
			2.0.0.Beta1 which is the latest release of the stack. You can actually use 
			this stack with any version of JBoss AS that implements Java EE 6, not just 
			JBoss AS 7! -->
		<dependency>
			<groupId>org.jboss.spec</groupId>
			<artifactId>jboss-javaee-web-6.0</artifactId>
			<version>3.0.1.Final</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.richfaces.ui</groupId>
			<artifactId>richfaces-components-ui</artifactId>
		</dependency>
		<dependency>
			<groupId>org.richfaces.core</groupId>
			<artifactId>richfaces-core-impl</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.security</groupId>
			<artifactId>seam-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.international</groupId>
			<artifactId>seam-international</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.transaction</groupId>
			<artifactId>seam-transaction</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.faces</groupId>
			<artifactId>seam-faces</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.4</version>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.persistence</groupId>
			<artifactId>seam-persistence</artifactId>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.conversation</groupId>
			<artifactId>seam-conversation-weld</artifactId>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.6</version>
		</dependency>

		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>${primefaces.version}</version>
		</dependency>

		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>2.1.7</version>
		</dependency>

		<dependency>
			<groupId>net.objectlab.kit</groupId>
			<artifactId>datecalc-common</artifactId>
			<version>1.2.0</version>
		</dependency>

		<dependency>
			<groupId>org.jadira.usertype</groupId>
			<artifactId>usertype.core</artifactId>
			<version>3.0.0.CR1</version>
		</dependency>


		<dependency>
			<groupId>net.objectlab.kit</groupId>
			<artifactId>datecalc-jdk</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>net.fortuna.ical4j</groupId>
			<artifactId>ical4j</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<groupId>com.ocpsoft</groupId>
			<artifactId>ocpsoft-pretty-time</artifactId>
		</dependency>

		<dependency>
			<groupId>jfree</groupId>
			<artifactId>jfreechart</artifactId>
			<version>1.0.13</version>
		</dependency>


		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.0</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-search</artifactId>
			<version>4.0.0.CR1</version><!--$NO-MVN-MAN-VER$ -->
			<exclusions>
				<exclusion>
					<groupId>dom4j</groupId>
					<artifactId>dom4j</artifactId>
				</exclusion>
				<exclusion>
					<groupId>antlr</groupId>
					<artifactId>antlr</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-core</artifactId>
			<version>1.1.2.AS7</version>
			<scope>provided</scope>
		</dependency>

	</dependencies>

	<build>
		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
				processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>